#1. 使用哈希表分别记录 “列状态” 、 “主对角线状态” 、 “副对角线状态”
class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        res = []
        if n == 0:
            return res

        nums = [i for i in range(n)]#记住这种创建列表的方法
        col = set()#创建集合，表示列状态
        master = set()#主对角线状态
        slave = set()#副对角线状态
        stack = []
        #调用回溯函数
        self.__backtracking(nums, 0, n, col, master, slave, stack, res)
        return res

    def __backtracking(self, nums, row, n, col, master, slave, stack, res):
        #如果row等于n,board调用_convert2board函数，再把它加到res里
        if row == n:
            board = self.__convert2board(stack, n)
            res.append(board)
            return

        for i in range(n):
            #如果当前列不在集合col里，并且row+当前列不在主对角线集合里，row-当前列不在副对角线里
            if i not in col and row + i not in master and row - i not in slave:
                #
                stack.append(nums[i])
                col.add(i)
                master.add(row + i)
                slave.add(row - i)

                self.__backtracking(nums, row + 1, n, col, master, slave, stack, res)#回溯下一行

                slave.remove(row - i)
                master.remove(row + i)
                col.remove(i)
                stack.pop()

    def __convert2board(self, stack, n):
        return ["." * stack[i] + "Q" + "." * (n - stack[i] - 1) for i in range(n)]


if __name__ == '__main__':
    n = 4#N皇后，N=4
    solution = Solution()#调用Solution类
    res = solution.solveNQueens(n)#调用solveQueens方法，n为4
    print(res)
    
#2.使用数组分别记录 “列状态” 、 “主对角线状态” 、 “副对角线状态”
from typing import List

class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        res = []
        if n == 0:
            return res

        nums = [i for i in range(n)]
        col = [False for _ in range(n)]
        master = [False for _ in range(2 * n - 1)]
        slave = [False for _ in range(2 * n - 1)]
        stack = []

        self.__backtracking(nums, 0, n, col, master, slave, stack, res)
        return res

    def __backtracking(self, nums, row, n, col, master, slave, stack, res):
        if row == n:
            board = self.__convert2board(stack, n)
            res.append(board)
            return

        for i in range(n):
            if not col[i] and not master[row + i] and not slave[row - i + n - 1]:
                stack.append(nums[i])
                col[i] = True
                master[row + i] = True
                slave[row - i + n - 1] = True

                self.__backtracking(nums, row + 1, n, col, master, slave, stack, res)

                slave[row - i + n - 1] = False
                master[row + i] = False
                col[i] = False
                stack.pop()

    def __convert2board(self, stack, n):
        return ["." * stack[i] + "Q" + "." * (n - stack[i] - 1) for i in range(n)]


if __name__ == '__main__':
    n = 4
    solution = Solution()
    res = solution.solveNQueens(n)
    print(res)
    
#3. 使用位图分别记录 “列状态” 、 “主对角线状态” 、 “副对角线状态” ，可以达到压缩空间复杂度的目的
from typing import List


class Solution:

    def solveNQueens(self, n: int) -> List[List[str]]:
        res = []
        if n == 0:
            return res

        nums = [i for i in range(n)]
        col = 0
        master = 0
        slave = 0
        stack = []

        self.__backtracking(nums, 0, n, col, master, slave, stack, res)
        return res

    def __backtracking(self, nums, row, n, col, master, slave, stack, res):
        if row == n:
            board = self.__convert2board(stack, n)
            res.append(board)
            return

        for i in range(n):
            if (col >> i) & 1 == 0 \
                    and ((master >> (row + i)) & 1) == 0 \
                    and ((slave >> (row - i + n - 1)) & 1) == 0:
                stack.append(nums[i])
                col ^= (1 << i)
                master ^= (1 << (row + i))
                slave ^= (1 << (row - i + n - 1))

                self.__backtracking(nums, row + 1, n, col, master, slave, stack, res)

                slave ^= (1 << (row - i + n - 1))
                master ^= (1 << (row + i))
                col ^= (1 << i)
                stack.pop()

    def __convert2board(self, stack, n):
        return ["." * stack[i] + "Q" + "." * (n - stack[i] - 1) for i in range(n)]


if __name__ == '__main__':
    n = 4
    solution = Solution()
    res = solution.solveNQueens(n)
    print(res)




