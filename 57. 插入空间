#本体主要思想在于如何将若干intervals内的元素和newInterval进行合并
#1.确定合并的开始元素start，确定该元素需要用到newInterval里面的第一个元素，分三种情况
#A. 大于当前intervals元素的第二个值（即较大值）->则start=newInterval[0]
#B. 小于较小的值，则start = min(newInterval[0],start)，因为它有可能已经落在前面的区间里面了，所以需要min函数
#C. 落在区间里，则start = vals[0]

#2.确定end，需要用到newInterval[1]，同时也分三种情况
#A. 如果小于较小值，说明end已经找到且为max(newInterval[1],end)
#B. 大于较大值，end=newInterval[1]，如果已经遍历到intervals最后一个元素，则break
#C. 落在区间，end=较大值
#最后添加后续的intervals里面的元素

#输入: intervals = [[1,3],[6,9]], newInterval = [2,5]
#输出: [[1,5],[6,9]]

class Solution:
    def insert(self, intervals, newInterval):
        if(len(intervals) == 0):
            return [newInterval]
        if(len(newInterval) == 0):
            return intervals
        start = min(newInterval[0],intervals[0][0])#1
        end = 0       
        res = []
        n = 0
        for vals in intervals:
            small, large = vals[0],vals[1]#
            #如果插入的左区间大于当前遍历区间的右区间，那么当前遍历区间加到结果里，
            #因为此时当前遍历区间跟插入区间没有区间重叠
            #并更新start变量为插入区间的左区间
            if(newInterval[0] > large):
                res.append(vals)
                start = newInterval[0]
            #如果插入区间的左区间小于当前遍历区间的左区间，更新start变量为start变量和插入左区间里的最小值
            elif(newInterval[0] < small):
                start = min(newInterval[0],start)
            else:#如果等于的话，start更新为当前遍历区间的左区间
                start = small
               
            #如果插入右区间小于当前遍历区间的左区间，end变量更新为插入右区间和end变量的最大值
            #然后把[start,end]区间加到res里去，再把没有遍历完的且无需再遍历的也加到res里去，循环结束，因为插入区间再也不能跟后面没遍历的区间重叠了
            if(newInterval[1] < small):
                end = max(newInterval[1], end)
                res.append([start,end])
                res.append(vals)
                break
            #如果插入右区间大于当前遍历区间右区间，把end变量更新为插入右区间
            #并且如果定义的变量n等于插入区间长度-1，把[start,end]变量加到res里，循环结束了
            #因为我们每遍历一个区间,n会加1，如果n等于那个值，说明插入右区间把遍历的全部区间都覆盖了
            elif(newInterval[1] > large):
                end = newInterval[1]
                if(n==len(intervals)-1):
                    res.append([start, end])
                    break
            #如果等于的话，end更新为当前遍历的右区间，并把[start,end]区间加到res里，
            else:
                end = large
                res.append([start, end])
                break
            n+=1
        res.extend(intervals[n+1:])
        return res

